{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","classNames","completed","title","TodoList","todos","map","getUserById","usersFromServer","find","initialTodos","userId","App","useState","setTodos","isTitleValid","setIsTitleValid","isUserValid","setIsUserValid","todoName","setTodoName","todoUserId","setTodoUserId","onSubmit","event","preventDefault","trim","ids","newTodo","Math","max","prev","htmlFor","type","value","placeholder","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"6MAAe,G,MAAA,CACb,CACEA,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,4B,uBCpDEC,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1C,OACE,mBAAGC,UAAU,WAAWC,KAAI,iBAAYF,EAAKF,OAA7C,SACGE,EAAKJ,QCDCO,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1C,OACE,0BACE,UAASA,EAAKT,GACdM,UAAWI,IAAW,WAAY,CAChC,sBAAuBD,EAAKE,YAHhC,UAME,oBAAIL,UAAU,kBAAd,SACGG,EAAKG,QAGPH,EAAKJ,MACJ,cAAC,EAAD,CAAUA,KAAMI,EAAKJ,WCdhBQ,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,OACE,yBAASR,UAAU,WAAnB,SACGQ,EAAMC,KAAI,SAAAN,GAAI,OACb,cAAC,EAAD,CAAUA,KAAMA,GAAWA,EAAKT,UCNlCgB,EAAc,SAAChB,GACnB,OAAOiB,EAAgBC,MAAK,SAAAb,GAAI,OAAIA,EAAKL,KAAOA,MAAO,MAGnDmB,ECVS,CACb,CACEnB,GAAI,EACJY,MAAO,qBACPD,WAAW,EACXS,OAAQ,GAEV,CACEpB,GAAI,GACJY,MAAO,kBACPD,WAAW,EACXS,OAAQ,GAEV,CACEpB,GAAI,EACJY,MAAO,qCACPD,WAAW,EACXS,OAAQ,IDPyBL,KAAI,SAAAN,GAAI,kCACxCA,GADwC,IAE3CJ,KAAMW,EAAYP,EAAKW,aAGZC,EAAM,WACjB,MAA0BC,mBAASH,GAAnC,mBAAOL,EAAP,KAAcS,EAAd,KACA,EAAwCD,oBAAS,GAAjD,mBAAOE,EAAP,KAAqBC,EAArB,KACA,EAAsCH,oBAAS,GAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KACA,EAAgCL,mBAAS,IAAzC,mBAAOM,EAAP,KAAiBC,EAAjB,KACA,EAAoCP,mBAAS,GAA7C,mBAAOQ,EAAP,KAAmBC,EAAnB,KA6BA,OACE,sBAAKzB,UAAU,MAAf,UACE,+CAEA,uBACE0B,SAhCmB,SAACC,GAWxB,GAVAA,EAAMC,iBAEDN,EAASO,QACZV,GAAgB,GAGbK,GACHH,GAAe,GAGbC,EAASO,QAAUL,EAAY,CACjC,IAAMM,EAAMtB,EAAMC,KAAI,SAAAN,GAAI,OAAIA,EAAKT,MAC7BqC,EAAU,CACdzB,MAAOgB,EACPR,OAAQU,EACR9B,GAAIsC,KAAKC,IAAL,MAAAD,KAAI,YAAQF,IAAO,EACvBzB,WAAW,EACXN,KAAMW,EAAYc,IAGpBP,GAAS,SAAAiB,GAAI,4BAASA,GAAT,CAAeH,OAC5BR,EAAY,IACZE,EAAc,KAQd,UAGE,sBAAKzB,UAAU,QAAf,UACE,uBAAOmC,QAAQ,QAAf,qBACA,uBACEzC,GAAG,QACHC,KAAK,QACLyC,KAAK,OACLC,MAAOf,EACPgB,YAAY,gBACZ,UAAQ,aACRC,SAAU,SAACZ,GACTJ,EAAYI,EAAMa,OAAOH,OACzBlB,GAAgB,OAGlBD,GAAgB,sBAAMlB,UAAU,QAAhB,qCAGpB,sBAAKA,UAAU,QAAf,UACE,uBAAOmC,QAAQ,SAAf,oBACA,yBACEzC,GAAG,SACHC,KAAK,SACL,UAAQ,aACR0C,MAAOb,EACPe,SAAU,SAACZ,GACTF,GAAeE,EAAMa,OAAOH,OAC5BhB,GAAe,IAPnB,UAUE,wBAAQgB,MAAM,IAAII,UAAQ,EAA1B,2BACC9B,EAAgBF,KAAI,SAAAV,GAAI,OACvB,wBAAQsC,MAAOtC,EAAKL,GAApB,SAAuCK,EAAKJ,MAAfI,EAAKL,WAIpC0B,GAAe,sBAAMpB,UAAU,QAAhB,qCAGnB,wBAAQoC,KAAK,SAAS,UAAQ,eAA9B,oBAKF,cAAC,EAAD,CAAU5B,MAAOA,QEhGvBkC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.ff479c16.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../types/user';\n\ntype Props = {\n  user: User\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../types/todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': todo.completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {todo.user && (\n        <UserInfo user={todo.user} />\n      )}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../types/todo';\n\ntype Props = {\n  todos: Todo[]\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","import { FormEvent, useState } from 'react';\nimport './App.scss';\nimport todosFromServer from './api/todos';\nimport usersFromServer from './api/users';\nimport { TodoList } from './components/TodoList';\n\nconst getUserById = (id: number) => {\n  return usersFromServer.find(user => user.id === id) || null;\n};\n\nconst initialTodos = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App = () => {\n  const [todos, setTodos] = useState(initialTodos);\n  const [isTitleValid, setIsTitleValid] = useState(true);\n  const [isUserValid, setIsUserValid] = useState(true);\n  const [todoName, setTodoName] = useState('');\n  const [todoUserId, setTodoUserId] = useState(0);\n\n  const handleSubmitForm = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!todoName.trim()) {\n      setIsTitleValid(false);\n    }\n\n    if (!todoUserId) {\n      setIsUserValid(false);\n    }\n\n    if (todoName.trim() && todoUserId) {\n      const ids = todos.map(todo => todo.id);\n      const newTodo = {\n        title: todoName,\n        userId: todoUserId,\n        id: Math.max(...ids) + 1,\n        completed: false,\n        user: getUserById(todoUserId),\n      };\n\n      setTodos(prev => ([...prev, newTodo]));\n      setTodoName('');\n      setTodoUserId(0);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        onSubmit={handleSubmitForm}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            id=\"title\"\n            name=\"title\"\n            type=\"text\"\n            value={todoName}\n            placeholder=\"Enter a title\"\n            data-cy=\"titleInput\"\n            onChange={(event) => {\n              setTodoName(event.target.value);\n              setIsTitleValid(true);\n            }}\n          />\n          {!isTitleValid && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userId\">User: </label>\n          <select\n            id=\"userId\"\n            name=\"userId\"\n            data-cy=\"userSelect\"\n            value={todoUserId}\n            onChange={(event) => {\n              setTodoUserId(+event.target.value);\n              setIsUserValid(true);\n            }}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {!isUserValid && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}